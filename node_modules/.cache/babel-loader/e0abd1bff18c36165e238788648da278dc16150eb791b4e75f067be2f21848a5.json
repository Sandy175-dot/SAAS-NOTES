{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\TENANT NEW\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let timeoutId;\n\n    // Force loading to false after 5 seconds\n    timeoutId = setTimeout(() => {\n      console.log('Authentication timeout - forcing loading to false');\n      setLoading(false);\n    }, 5000);\n\n    // Get initial session\n    const getSession = async () => {\n      try {\n        console.log('Getting initial session...');\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Session error:', error);\n          clearTimeout(timeoutId);\n          setLoading(false);\n          return;\n        }\n        if (session) {\n          console.log('Session found:', session.user.email);\n          await handleUserSession(session.user);\n        } else {\n          console.log('No session found');\n        }\n      } catch (error) {\n        console.error('Error getting session:', error);\n      } finally {\n        clearTimeout(timeoutId);\n        setLoading(false);\n      }\n    };\n    getSession();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user;\n      console.log('Auth state change:', event, session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email);\n      if (event === 'SIGNED_IN' && session) {\n        setLoading(true);\n        await handleUserSession(session.user);\n        setLoading(false);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setUserType(null);\n        setLoading(false);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n      clearTimeout(timeoutId);\n    };\n  }, []);\n  const handleUserSession = async authUser => {\n    try {\n      console.log('Handling user session for:', authUser.email);\n\n      // Get user profile\n      const {\n        data: profileData,\n        error\n      } = await supabase.from('profiles').select(`\n          *,\n          tenants (\n            id,\n            company_name,\n            company_email,\n            subscription_plan,\n            max_users\n          )\n        `).eq('id', authUser.id).single();\n      if (error) {\n        console.error('Error fetching profile:', error);\n\n        // If profile doesn't exist, create it\n        if (error.code === 'PGRST116') {\n          var _authUser$user_metada, _authUser$user_metada2;\n          console.log('Profile not found, creating one...');\n          const {\n            data: newProfile,\n            error: createError\n          } = await supabase.from('profiles').insert([{\n            id: authUser.id,\n            email: authUser.email,\n            full_name: ((_authUser$user_metada = authUser.user_metadata) === null || _authUser$user_metada === void 0 ? void 0 : _authUser$user_metada.full_name) || 'User',\n            role: ((_authUser$user_metada2 = authUser.user_metadata) === null || _authUser$user_metada2 === void 0 ? void 0 : _authUser$user_metada2.role) || 'tenant_user'\n          }]).select().single();\n          if (createError) {\n            console.error('Error creating profile:', createError);\n            // Clear the session if profile creation fails\n            await supabase.auth.signOut();\n            return;\n          }\n          console.log('Profile created successfully:', newProfile);\n          setUser(authUser);\n          setProfile(newProfile);\n          setUserType(newProfile.role === 'tenant_admin' ? 'tenant' : 'user');\n          return;\n        }\n\n        // For other errors, clear the session\n        console.log('Clearing session due to profile error');\n        await supabase.auth.signOut();\n        return;\n      }\n      console.log('Profile found:', profileData);\n      setUser(authUser);\n      setProfile(profileData);\n      setUserType(profileData.role === 'tenant_admin' ? 'tenant' : 'user');\n\n      // Log login activity\n      if (profileData.tenant_id) {\n        await logActivity(authUser.id, profileData.tenant_id, 'login', null, null, 'User logged in');\n      }\n    } catch (error) {\n      console.error('Error handling user session:', error);\n      // Clear session on any error\n      await supabase.auth.signOut();\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      console.log('Attempting login with:', email);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        console.error('Login error:', error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n      console.log('Login successful:', data);\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      console.error('Login exception:', error);\n      return {\n        success: false,\n        error: 'Login failed: ' + error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async (formData, type) => {\n    try {\n      setLoading(true);\n\n      // Create auth user first\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.name,\n            role: type === 'tenant' ? 'tenant_admin' : 'tenant_user',\n            company_name: formData.companyName || null,\n            phone: formData.phone || null,\n            selected_tenant_id: formData.selectedTenantId || null\n          }\n        }\n      });\n      if (authError) {\n        return {\n          success: false,\n          error: authError.message\n        };\n      }\n\n      // If user creation was successful and it's a tenant signup, create tenant\n      if (authData.user && type === 'tenant') {\n        const {\n          data: tenantData,\n          error: tenantError\n        } = await supabase.from('tenants').insert([{\n          company_name: formData.companyName,\n          company_email: formData.email,\n          company_phone: formData.phone || null,\n          created_by: authData.user.id\n        }]).select().single();\n        if (tenantError) {\n          console.error('Tenant creation error:', tenantError);\n          // Don't fail the signup if tenant creation fails, just log it\n        } else {\n          // Update the user's profile with tenant_id\n          const {\n            error: profileError\n          } = await supabase.from('profiles').update({\n            tenant_id: tenantData.id\n          }).eq('id', authData.user.id);\n          if (profileError) {\n            console.error('Profile update error:', profileError);\n          }\n        }\n      }\n\n      // If it's a user signup and they selected a tenant, update their profile\n      if (authData.user && type === 'user' && formData.selectedTenantId) {\n        const {\n          error: profileError\n        } = await supabase.from('profiles').update({\n          tenant_id: formData.selectedTenantId\n        }).eq('id', authData.user.id);\n        if (profileError) {\n          console.error('Profile update error for user:', profileError);\n        }\n      }\n      return {\n        success: true,\n        user: authData.user\n      };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // Log logout activity before signing out\n      if (user && profile) {\n        await logActivity(user.id, profile.tenant_id, 'logout', null, null, 'User logged out');\n      }\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n  const logActivity = async (userId, tenantId, activityType, resourceType = null, resourceId = null, description = '') => {\n    try {\n      const {\n        error\n      } = await supabase.rpc('log_activity', {\n        p_user_id: userId,\n        p_tenant_id: tenantId,\n        p_activity_type: activityType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n        p_description: description,\n        p_metadata: {}\n      });\n      if (error) {\n        console.error('Error logging activity:', error);\n      }\n    } catch (error) {\n      console.error('Error in logActivity:', error);\n    }\n  };\n  const value = {\n    user,\n    profile,\n    userType,\n    login,\n    signup,\n    logout,\n    loading,\n    logActivity\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"rdxSALELrgyIsgH8a/mfXKOdhBc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","profile","setProfile","userType","setUserType","loading","setLoading","timeoutId","setTimeout","console","log","getSession","data","session","error","auth","clearTimeout","email","handleUserSession","subscription","onAuthStateChange","event","_session$user","unsubscribe","authUser","profileData","from","select","eq","id","single","code","_authUser$user_metada","_authUser$user_metada2","newProfile","createError","insert","full_name","user_metadata","role","signOut","tenant_id","logActivity","login","password","signInWithPassword","success","message","signup","formData","type","authData","authError","signUp","options","name","company_name","companyName","phone","selected_tenant_id","selectedTenantId","tenantData","tenantError","company_email","company_phone","created_by","profileError","update","logout","userId","tenantId","activityType","resourceType","resourceId","description","rpc","p_user_id","p_tenant_id","p_activity_type","p_resource_type","p_resource_id","p_description","p_metadata","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/TENANT NEW/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let timeoutId;\n    \n    // Force loading to false after 5 seconds\n    timeoutId = setTimeout(() => {\n      console.log('Authentication timeout - forcing loading to false');\n      setLoading(false);\n    }, 5000);\n\n    // Get initial session\n    const getSession = async () => {\n      try {\n        console.log('Getting initial session...');\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Session error:', error);\n          clearTimeout(timeoutId);\n          setLoading(false);\n          return;\n        }\n        \n        if (session) {\n          console.log('Session found:', session.user.email);\n          await handleUserSession(session.user);\n        } else {\n          console.log('No session found');\n        }\n      } catch (error) {\n        console.error('Error getting session:', error);\n      } finally {\n        clearTimeout(timeoutId);\n        setLoading(false);\n      }\n    };\n\n    getSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state change:', event, session?.user?.email);\n      \n      if (event === 'SIGNED_IN' && session) {\n        setLoading(true);\n        await handleUserSession(session.user);\n        setLoading(false);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setUserType(null);\n        setLoading(false);\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  const handleUserSession = async (authUser) => {\n    try {\n      console.log('Handling user session for:', authUser.email);\n      \n      // Get user profile\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select(`\n          *,\n          tenants (\n            id,\n            company_name,\n            company_email,\n            subscription_plan,\n            max_users\n          )\n        `)\n        .eq('id', authUser.id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching profile:', error);\n        \n        // If profile doesn't exist, create it\n        if (error.code === 'PGRST116') {\n          console.log('Profile not found, creating one...');\n          const { data: newProfile, error: createError } = await supabase\n            .from('profiles')\n            .insert([{\n              id: authUser.id,\n              email: authUser.email,\n              full_name: authUser.user_metadata?.full_name || 'User',\n              role: authUser.user_metadata?.role || 'tenant_user'\n            }])\n            .select()\n            .single();\n\n          if (createError) {\n            console.error('Error creating profile:', createError);\n            // Clear the session if profile creation fails\n            await supabase.auth.signOut();\n            return;\n          }\n\n          console.log('Profile created successfully:', newProfile);\n          setUser(authUser);\n          setProfile(newProfile);\n          setUserType(newProfile.role === 'tenant_admin' ? 'tenant' : 'user');\n          return;\n        }\n        \n        // For other errors, clear the session\n        console.log('Clearing session due to profile error');\n        await supabase.auth.signOut();\n        return;\n      }\n\n      console.log('Profile found:', profileData);\n      setUser(authUser);\n      setProfile(profileData);\n      setUserType(profileData.role === 'tenant_admin' ? 'tenant' : 'user');\n\n      // Log login activity\n      if (profileData.tenant_id) {\n        await logActivity(authUser.id, profileData.tenant_id, 'login', null, null, 'User logged in');\n      }\n    } catch (error) {\n      console.error('Error handling user session:', error);\n      // Clear session on any error\n      await supabase.auth.signOut();\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      console.log('Attempting login with:', email);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        console.error('Login error:', error);\n        return { success: false, error: error.message };\n      }\n\n      console.log('Login successful:', data);\n      return { success: true, user: data.user };\n    } catch (error) {\n      console.error('Login exception:', error);\n      return { success: false, error: 'Login failed: ' + error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signup = async (formData, type) => {\n    try {\n      setLoading(true);\n      \n      // Create auth user first\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.name,\n            role: type === 'tenant' ? 'tenant_admin' : 'tenant_user',\n            company_name: formData.companyName || null,\n            phone: formData.phone || null,\n            selected_tenant_id: formData.selectedTenantId || null\n          }\n        }\n      });\n\n      if (authError) {\n        return { success: false, error: authError.message };\n      }\n\n      // If user creation was successful and it's a tenant signup, create tenant\n      if (authData.user && type === 'tenant') {\n        const { data: tenantData, error: tenantError } = await supabase\n          .from('tenants')\n          .insert([{\n            company_name: formData.companyName,\n            company_email: formData.email,\n            company_phone: formData.phone || null,\n            created_by: authData.user.id\n          }])\n          .select()\n          .single();\n\n        if (tenantError) {\n          console.error('Tenant creation error:', tenantError);\n          // Don't fail the signup if tenant creation fails, just log it\n        } else {\n          // Update the user's profile with tenant_id\n          const { error: profileError } = await supabase\n            .from('profiles')\n            .update({ tenant_id: tenantData.id })\n            .eq('id', authData.user.id);\n          \n          if (profileError) {\n            console.error('Profile update error:', profileError);\n          }\n        }\n      }\n\n      // If it's a user signup and they selected a tenant, update their profile\n      if (authData.user && type === 'user' && formData.selectedTenantId) {\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .update({ tenant_id: formData.selectedTenantId })\n          .eq('id', authData.user.id);\n        \n        if (profileError) {\n          console.error('Profile update error for user:', profileError);\n        }\n      }\n\n      return { success: true, user: authData.user };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { success: false, error: 'Registration failed' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Log logout activity before signing out\n      if (user && profile) {\n        await logActivity(user.id, profile.tenant_id, 'logout', null, null, 'User logged out');\n      }\n      \n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  const logActivity = async (userId, tenantId, activityType, resourceType = null, resourceId = null, description = '') => {\n    try {\n      const { error } = await supabase.rpc('log_activity', {\n        p_user_id: userId,\n        p_tenant_id: tenantId,\n        p_activity_type: activityType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n        p_description: description,\n        p_metadata: {}\n      });\n\n      if (error) {\n        console.error('Error logging activity:', error);\n      }\n    } catch (error) {\n      console.error('Error in logActivity:', error);\n    }\n  };\n\n  const value = {\n    user,\n    profile,\n    userType,\n    login,\n    signup,\n    logout,\n    loading,\n    logActivity\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,IAAIoB,SAAS;;IAEb;IACAA,SAAS,GAAGC,UAAU,CAAC,MAAM;MAC3BC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAChEJ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,MAAMK,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACFF,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzC,MAAM;UAAEE,IAAI,EAAE;YAAEC;UAAQ,CAAC;UAAEC;QAAM,CAAC,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,CAACJ,UAAU,CAAC,CAAC;QAErE,IAAIG,KAAK,EAAE;UACTL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;UACtCE,YAAY,CAACT,SAAS,CAAC;UACvBD,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;QAEA,IAAIO,OAAO,EAAE;UACXJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEG,OAAO,CAACd,IAAI,CAACkB,KAAK,CAAC;UACjD,MAAMC,iBAAiB,CAACL,OAAO,CAACd,IAAI,CAAC;QACvC,CAAC,MAAM;UACLU,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACjC;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,SAAS;QACRE,YAAY,CAACT,SAAS,CAAC;QACvBD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,UAAU,CAAC,CAAC;;IAEZ;IACA,MAAM;MAAEC,IAAI,EAAE;QAAEO;MAAa;IAAE,CAAC,GAAG/B,QAAQ,CAAC2B,IAAI,CAACK,iBAAiB,CAAC,OAAOC,KAAK,EAAER,OAAO,KAAK;MAAA,IAAAS,aAAA;MAC3Fb,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEW,KAAK,EAAER,OAAO,aAAPA,OAAO,wBAAAS,aAAA,GAAPT,OAAO,CAAEd,IAAI,cAAAuB,aAAA,uBAAbA,aAAA,CAAeL,KAAK,CAAC;MAE9D,IAAII,KAAK,KAAK,WAAW,IAAIR,OAAO,EAAE;QACpCP,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMY,iBAAiB,CAACL,OAAO,CAACd,IAAI,CAAC;QACrCO,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,MAAM,IAAIe,KAAK,KAAK,YAAY,EAAE;QACjCrB,OAAO,CAAC,IAAI,CAAC;QACbE,UAAU,CAAC,IAAI,CAAC;QAChBE,WAAW,CAAC,IAAI,CAAC;QACjBE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXa,YAAY,CAACI,WAAW,CAAC,CAAC;MAC1BP,YAAY,CAACT,SAAS,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,iBAAiB,GAAG,MAAOM,QAAQ,IAAK;IAC5C,IAAI;MACFf,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEc,QAAQ,CAACP,KAAK,CAAC;;MAEzD;MACA,MAAM;QAAEL,IAAI,EAAEa,WAAW;QAAEX;MAAM,CAAC,GAAG,MAAM1B,QAAQ,CAChDsC,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,CAAC,CACDC,EAAE,CAAC,IAAI,EAAEJ,QAAQ,CAACK,EAAE,CAAC,CACrBC,MAAM,CAAC,CAAC;MAEX,IAAIhB,KAAK,EAAE;QACTL,OAAO,CAACK,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;;QAE/C;QACA,IAAIA,KAAK,CAACiB,IAAI,KAAK,UAAU,EAAE;UAAA,IAAAC,qBAAA,EAAAC,sBAAA;UAC7BxB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;UACjD,MAAM;YAAEE,IAAI,EAAEsB,UAAU;YAAEpB,KAAK,EAAEqB;UAAY,CAAC,GAAG,MAAM/C,QAAQ,CAC5DsC,IAAI,CAAC,UAAU,CAAC,CAChBU,MAAM,CAAC,CAAC;YACPP,EAAE,EAAEL,QAAQ,CAACK,EAAE;YACfZ,KAAK,EAAEO,QAAQ,CAACP,KAAK;YACrBoB,SAAS,EAAE,EAAAL,qBAAA,GAAAR,QAAQ,CAACc,aAAa,cAAAN,qBAAA,uBAAtBA,qBAAA,CAAwBK,SAAS,KAAI,MAAM;YACtDE,IAAI,EAAE,EAAAN,sBAAA,GAAAT,QAAQ,CAACc,aAAa,cAAAL,sBAAA,uBAAtBA,sBAAA,CAAwBM,IAAI,KAAI;UACxC,CAAC,CAAC,CAAC,CACFZ,MAAM,CAAC,CAAC,CACRG,MAAM,CAAC,CAAC;UAEX,IAAIK,WAAW,EAAE;YACf1B,OAAO,CAACK,KAAK,CAAC,yBAAyB,EAAEqB,WAAW,CAAC;YACrD;YACA,MAAM/C,QAAQ,CAAC2B,IAAI,CAACyB,OAAO,CAAC,CAAC;YAC7B;UACF;UAEA/B,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEwB,UAAU,CAAC;UACxDlC,OAAO,CAACwB,QAAQ,CAAC;UACjBtB,UAAU,CAACgC,UAAU,CAAC;UACtB9B,WAAW,CAAC8B,UAAU,CAACK,IAAI,KAAK,cAAc,GAAG,QAAQ,GAAG,MAAM,CAAC;UACnE;QACF;;QAEA;QACA9B,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpD,MAAMtB,QAAQ,CAAC2B,IAAI,CAACyB,OAAO,CAAC,CAAC;QAC7B;MACF;MAEA/B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEe,WAAW,CAAC;MAC1CzB,OAAO,CAACwB,QAAQ,CAAC;MACjBtB,UAAU,CAACuB,WAAW,CAAC;MACvBrB,WAAW,CAACqB,WAAW,CAACc,IAAI,KAAK,cAAc,GAAG,QAAQ,GAAG,MAAM,CAAC;;MAEpE;MACA,IAAId,WAAW,CAACgB,SAAS,EAAE;QACzB,MAAMC,WAAW,CAAClB,QAAQ,CAACK,EAAE,EAAEJ,WAAW,CAACgB,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,CAAC;MAC9F;IACF,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD;MACA,MAAM1B,QAAQ,CAAC2B,IAAI,CAACyB,OAAO,CAAC,CAAC;IAC/B;EACF,CAAC;EAED,MAAMG,KAAK,GAAG,MAAAA,CAAO1B,KAAK,EAAE2B,QAAQ,KAAK;IACvC,IAAI;MACFtC,UAAU,CAAC,IAAI,CAAC;MAChBG,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEO,KAAK,CAAC;MAE5C,MAAM;QAAEL,IAAI;QAAEE;MAAM,CAAC,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,CAAC8B,kBAAkB,CAAC;QAC7D5B,KAAK;QACL2B;MACF,CAAC,CAAC;MAEF,IAAI9B,KAAK,EAAE;QACTL,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACpC,OAAO;UAAEgC,OAAO,EAAE,KAAK;UAAEhC,KAAK,EAAEA,KAAK,CAACiC;QAAQ,CAAC;MACjD;MAEAtC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEE,IAAI,CAAC;MACtC,OAAO;QAAEkC,OAAO,EAAE,IAAI;QAAE/C,IAAI,EAAEa,IAAI,CAACb;MAAK,CAAC;IAC3C,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,OAAO;QAAEgC,OAAO,EAAE,KAAK;QAAEhC,KAAK,EAAE,gBAAgB,GAAGA,KAAK,CAACiC;MAAQ,CAAC;IACpE,CAAC,SAAS;MACRzC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM0C,MAAM,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,KAAK;IACvC,IAAI;MACF5C,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAM;QAAEM,IAAI,EAAEuC,QAAQ;QAAErC,KAAK,EAAEsC;MAAU,CAAC,GAAG,MAAMhE,QAAQ,CAAC2B,IAAI,CAACsC,MAAM,CAAC;QACtEpC,KAAK,EAAEgC,QAAQ,CAAChC,KAAK;QACrB2B,QAAQ,EAAEK,QAAQ,CAACL,QAAQ;QAC3BU,OAAO,EAAE;UACP1C,IAAI,EAAE;YACJyB,SAAS,EAAEY,QAAQ,CAACM,IAAI;YACxBhB,IAAI,EAAEW,IAAI,KAAK,QAAQ,GAAG,cAAc,GAAG,aAAa;YACxDM,YAAY,EAAEP,QAAQ,CAACQ,WAAW,IAAI,IAAI;YAC1CC,KAAK,EAAET,QAAQ,CAACS,KAAK,IAAI,IAAI;YAC7BC,kBAAkB,EAAEV,QAAQ,CAACW,gBAAgB,IAAI;UACnD;QACF;MACF,CAAC,CAAC;MAEF,IAAIR,SAAS,EAAE;QACb,OAAO;UAAEN,OAAO,EAAE,KAAK;UAAEhC,KAAK,EAAEsC,SAAS,CAACL;QAAQ,CAAC;MACrD;;MAEA;MACA,IAAII,QAAQ,CAACpD,IAAI,IAAImD,IAAI,KAAK,QAAQ,EAAE;QACtC,MAAM;UAAEtC,IAAI,EAAEiD,UAAU;UAAE/C,KAAK,EAAEgD;QAAY,CAAC,GAAG,MAAM1E,QAAQ,CAC5DsC,IAAI,CAAC,SAAS,CAAC,CACfU,MAAM,CAAC,CAAC;UACPoB,YAAY,EAAEP,QAAQ,CAACQ,WAAW;UAClCM,aAAa,EAAEd,QAAQ,CAAChC,KAAK;UAC7B+C,aAAa,EAAEf,QAAQ,CAACS,KAAK,IAAI,IAAI;UACrCO,UAAU,EAAEd,QAAQ,CAACpD,IAAI,CAAC8B;QAC5B,CAAC,CAAC,CAAC,CACFF,MAAM,CAAC,CAAC,CACRG,MAAM,CAAC,CAAC;QAEX,IAAIgC,WAAW,EAAE;UACfrD,OAAO,CAACK,KAAK,CAAC,wBAAwB,EAAEgD,WAAW,CAAC;UACpD;QACF,CAAC,MAAM;UACL;UACA,MAAM;YAAEhD,KAAK,EAAEoD;UAAa,CAAC,GAAG,MAAM9E,QAAQ,CAC3CsC,IAAI,CAAC,UAAU,CAAC,CAChByC,MAAM,CAAC;YAAE1B,SAAS,EAAEoB,UAAU,CAAChC;UAAG,CAAC,CAAC,CACpCD,EAAE,CAAC,IAAI,EAAEuB,QAAQ,CAACpD,IAAI,CAAC8B,EAAE,CAAC;UAE7B,IAAIqC,YAAY,EAAE;YAChBzD,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEoD,YAAY,CAAC;UACtD;QACF;MACF;;MAEA;MACA,IAAIf,QAAQ,CAACpD,IAAI,IAAImD,IAAI,KAAK,MAAM,IAAID,QAAQ,CAACW,gBAAgB,EAAE;QACjE,MAAM;UAAE9C,KAAK,EAAEoD;QAAa,CAAC,GAAG,MAAM9E,QAAQ,CAC3CsC,IAAI,CAAC,UAAU,CAAC,CAChByC,MAAM,CAAC;UAAE1B,SAAS,EAAEQ,QAAQ,CAACW;QAAiB,CAAC,CAAC,CAChDhC,EAAE,CAAC,IAAI,EAAEuB,QAAQ,CAACpD,IAAI,CAAC8B,EAAE,CAAC;QAE7B,IAAIqC,YAAY,EAAE;UAChBzD,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEoD,YAAY,CAAC;QAC/D;MACF;MAEA,OAAO;QAAEpB,OAAO,EAAE,IAAI;QAAE/C,IAAI,EAAEoD,QAAQ,CAACpD;MAAK,CAAC;IAC/C,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,OAAO;QAAEgC,OAAO,EAAE,KAAK;QAAEhC,KAAK,EAAE;MAAsB,CAAC;IACzD,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAM8D,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;MACA,IAAIrE,IAAI,IAAIE,OAAO,EAAE;QACnB,MAAMyC,WAAW,CAAC3C,IAAI,CAAC8B,EAAE,EAAE5B,OAAO,CAACwC,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,iBAAiB,CAAC;MACxF;MAEA,MAAM;QAAE3B;MAAM,CAAC,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,CAACyB,OAAO,CAAC,CAAC;MAC/C,IAAI1B,KAAK,EAAE;QACTL,OAAO,CAACK,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAM4B,WAAW,GAAG,MAAAA,CAAO2B,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,YAAY,GAAG,IAAI,EAAEC,UAAU,GAAG,IAAI,EAAEC,WAAW,GAAG,EAAE,KAAK;IACtH,IAAI;MACF,MAAM;QAAE5D;MAAM,CAAC,GAAG,MAAM1B,QAAQ,CAACuF,GAAG,CAAC,cAAc,EAAE;QACnDC,SAAS,EAAEP,MAAM;QACjBQ,WAAW,EAAEP,QAAQ;QACrBQ,eAAe,EAAEP,YAAY;QAC7BQ,eAAe,EAAEP,YAAY;QAC7BQ,aAAa,EAAEP,UAAU;QACzBQ,aAAa,EAAEP,WAAW;QAC1BQ,UAAU,EAAE,CAAC;MACf,CAAC,CAAC;MAEF,IAAIpE,KAAK,EAAE;QACTL,OAAO,CAACK,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAMqE,KAAK,GAAG;IACZpF,IAAI;IACJE,OAAO;IACPE,QAAQ;IACRwC,KAAK;IACLK,MAAM;IACNoB,MAAM;IACN/D,OAAO;IACPqC;EACF,CAAC;EAED,oBACEpD,OAAA,CAACC,WAAW,CAAC6F,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtF,QAAA,EAChCA;EAAQ;IAAAwF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1F,GAAA,CAjSWF,YAAY;AAAA6F,EAAA,GAAZ7F,YAAY;AAAA,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}