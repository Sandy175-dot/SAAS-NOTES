{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../lib/supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[profile,setProfile]=useState(null);const[userType,setUserType]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{let timeoutId;// Force loading to false after 5 seconds\ntimeoutId=setTimeout(()=>{console.log('Authentication timeout - forcing loading to false');setLoading(false);},5000);// Get initial session\nconst getSession=async()=>{try{console.log('Getting initial session...');const{data:{session},error}=await supabase.auth.getSession();if(error){console.error('Session error:',error);clearTimeout(timeoutId);setLoading(false);return;}if(session){console.log('Session found:',session.user.email);await handleUserSession(session.user);}else{console.log('No session found');}}catch(error){console.error('Error getting session:',error);}finally{clearTimeout(timeoutId);setLoading(false);}};getSession();// Listen for auth changes\nconst{data:{subscription}}=supabase.auth.onAuthStateChange(async(event,session)=>{var _session$user;console.log('Auth state change:',event,session===null||session===void 0?void 0:(_session$user=session.user)===null||_session$user===void 0?void 0:_session$user.email);if(event==='SIGNED_IN'&&session){setLoading(true);await handleUserSession(session.user);setLoading(false);}else if(event==='SIGNED_OUT'){setUser(null);setProfile(null);setUserType(null);setLoading(false);}});return()=>{subscription.unsubscribe();clearTimeout(timeoutId);};},[]);const handleUserSession=async authUser=>{try{console.log('Handling user session for:',authUser.email);// Get user profile\nconst{data:profileData,error}=await supabase.from('profiles').select(\"\\n          *,\\n          tenants (\\n            id,\\n            company_name,\\n            company_email,\\n            subscription_plan,\\n            max_users\\n          )\\n        \").eq('id',authUser.id).single();if(error){console.error('Error fetching profile:',error);// If profile doesn't exist, create it\nif(error.code==='PGRST116'){var _authUser$user_metada,_authUser$user_metada2;console.log('Profile not found, creating one...');const{data:newProfile,error:createError}=await supabase.from('profiles').insert([{id:authUser.id,email:authUser.email,full_name:((_authUser$user_metada=authUser.user_metadata)===null||_authUser$user_metada===void 0?void 0:_authUser$user_metada.full_name)||'User',role:((_authUser$user_metada2=authUser.user_metadata)===null||_authUser$user_metada2===void 0?void 0:_authUser$user_metada2.role)||'tenant_user'}]).select().single();if(createError){console.error('Error creating profile:',createError);// Clear the session if profile creation fails\nawait supabase.auth.signOut();return;}console.log('Profile created successfully:',newProfile);setUser(authUser);setProfile(newProfile);setUserType(newProfile.role==='tenant_admin'?'tenant':'user');return;}// For other errors, clear the session\nconsole.log('Clearing session due to profile error');await supabase.auth.signOut();return;}console.log('Profile found:',profileData);setUser(authUser);setProfile(profileData);setUserType(profileData.role==='tenant_admin'?'tenant':profileData.role==='companyless_user'?'companyless':'user');// Log login activity\nif(profileData.tenant_id){await logActivity(authUser.id,profileData.tenant_id,'login',null,null,'User logged in');}}catch(error){console.error('Error handling user session:',error);// Clear session on any error\nawait supabase.auth.signOut();}};const login=async(email,password)=>{try{setLoading(true);console.log('Attempting login with:',email);const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error){console.error('Login error:',error);return{success:false,error:error.message};}console.log('Login successful:',data);return{success:true,user:data.user};}catch(error){console.error('Login exception:',error);return{success:false,error:'Login failed: '+error.message};}finally{setLoading(false);}};const signup=async(formData,type)=>{try{setLoading(true);// Create auth user first\nconst{data:authData,error:authError}=await supabase.auth.signUp({email:formData.email,password:formData.password,options:{data:{full_name:formData.name,role:type==='tenant'?'tenant_admin':type==='companyless'?'companyless_user':'tenant_user',company_name:formData.companyName||null,phone:formData.phone||null,selected_tenant_id:formData.selectedTenantId||null}}});if(authError){return{success:false,error:authError.message};}// If user creation was successful and it's a tenant signup, create tenant\nif(authData.user&&type==='tenant'){const{data:tenantData,error:tenantError}=await supabase.from('tenants').insert([{company_name:formData.companyName,company_email:formData.email,company_phone:formData.phone||null,created_by:authData.user.id}]).select().single();if(tenantError){console.error('Tenant creation error:',tenantError);// Don't fail the signup if tenant creation fails, just log it\n}else{// Update the user's profile with tenant_id\nconst{error:profileError}=await supabase.from('profiles').update({tenant_id:tenantData.id}).eq('id',authData.user.id);if(profileError){console.error('Profile update error:',profileError);}}}// If it's a user signup and they selected a tenant, update their profile\nif(authData.user&&type==='user'&&formData.selectedTenantId){const{error:profileError}=await supabase.from('profiles').update({tenant_id:formData.selectedTenantId}).eq('id',authData.user.id);if(profileError){console.error('Profile update error for user:',profileError);}}return{success:true,user:authData.user};}catch(error){console.error('Signup error:',error);return{success:false,error:'Registration failed'};}finally{setLoading(false);}};const logout=async()=>{try{// Log logout activity before signing out\nif(user&&profile){await logActivity(user.id,profile.tenant_id,'logout',null,null,'User logged out');}const{error}=await supabase.auth.signOut();if(error){console.error('Error signing out:',error);}}catch(error){console.error('Error during logout:',error);}};const logActivity=async function(userId,tenantId,activityType){let resourceType=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let resourceId=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;let description=arguments.length>5&&arguments[5]!==undefined?arguments[5]:'';try{const{error}=await supabase.rpc('log_activity',{p_user_id:userId,p_tenant_id:tenantId,p_activity_type:activityType,p_resource_type:resourceType,p_resource_id:resourceId,p_description:description,p_metadata:{}});if(error){console.error('Error logging activity:',error);}}catch(error){console.error('Error in logActivity:',error);}};const value={user,profile,userType,login,signup,logout,loading,logActivity};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","profile","setProfile","userType","setUserType","loading","setLoading","timeoutId","setTimeout","console","log","getSession","data","session","error","auth","clearTimeout","email","handleUserSession","subscription","onAuthStateChange","event","_session$user","unsubscribe","authUser","profileData","from","select","eq","id","single","code","_authUser$user_metada","_authUser$user_metada2","newProfile","createError","insert","full_name","user_metadata","role","signOut","tenant_id","logActivity","login","password","signInWithPassword","success","message","signup","formData","type","authData","authError","signUp","options","name","company_name","companyName","phone","selected_tenant_id","selectedTenantId","tenantData","tenantError","company_email","company_phone","created_by","profileError","update","logout","userId","tenantId","activityType","resourceType","arguments","length","undefined","resourceId","description","rpc","p_user_id","p_tenant_id","p_activity_type","p_resource_type","p_resource_id","p_description","p_metadata","value","Provider"],"sources":["C:/Users/Asus/Desktop/SAAS-NOTES-APP-SETUP/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let timeoutId;\n    \n    // Force loading to false after 5 seconds\n    timeoutId = setTimeout(() => {\n      console.log('Authentication timeout - forcing loading to false');\n      setLoading(false);\n    }, 5000);\n\n    // Get initial session\n    const getSession = async () => {\n      try {\n        console.log('Getting initial session...');\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Session error:', error);\n          clearTimeout(timeoutId);\n          setLoading(false);\n          return;\n        }\n        \n        if (session) {\n          console.log('Session found:', session.user.email);\n          await handleUserSession(session.user);\n        } else {\n          console.log('No session found');\n        }\n      } catch (error) {\n        console.error('Error getting session:', error);\n      } finally {\n        clearTimeout(timeoutId);\n        setLoading(false);\n      }\n    };\n\n    getSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state change:', event, session?.user?.email);\n      \n      if (event === 'SIGNED_IN' && session) {\n        setLoading(true);\n        await handleUserSession(session.user);\n        setLoading(false);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setUserType(null);\n        setLoading(false);\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n      clearTimeout(timeoutId);\n    };\n  }, []);\n\n  const handleUserSession = async (authUser) => {\n    try {\n      console.log('Handling user session for:', authUser.email);\n      \n      // Get user profile\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select(`\n          *,\n          tenants (\n            id,\n            company_name,\n            company_email,\n            subscription_plan,\n            max_users\n          )\n        `)\n        .eq('id', authUser.id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching profile:', error);\n        \n        // If profile doesn't exist, create it\n        if (error.code === 'PGRST116') {\n          console.log('Profile not found, creating one...');\n          const { data: newProfile, error: createError } = await supabase\n            .from('profiles')\n            .insert([{\n              id: authUser.id,\n              email: authUser.email,\n              full_name: authUser.user_metadata?.full_name || 'User',\n              role: authUser.user_metadata?.role || 'tenant_user'\n            }])\n            .select()\n            .single();\n\n          if (createError) {\n            console.error('Error creating profile:', createError);\n            // Clear the session if profile creation fails\n            await supabase.auth.signOut();\n            return;\n          }\n\n          console.log('Profile created successfully:', newProfile);\n          setUser(authUser);\n          setProfile(newProfile);\n          setUserType(newProfile.role === 'tenant_admin' ? 'tenant' : 'user');\n          return;\n        }\n        \n        // For other errors, clear the session\n        console.log('Clearing session due to profile error');\n        await supabase.auth.signOut();\n        return;\n      }\n\n      console.log('Profile found:', profileData);\n      setUser(authUser);\n      setProfile(profileData);\n      setUserType(profileData.role === 'tenant_admin' ? 'tenant' : \n                  profileData.role === 'companyless_user' ? 'companyless' : 'user');\n\n      // Log login activity\n      if (profileData.tenant_id) {\n        await logActivity(authUser.id, profileData.tenant_id, 'login', null, null, 'User logged in');\n      }\n    } catch (error) {\n      console.error('Error handling user session:', error);\n      // Clear session on any error\n      await supabase.auth.signOut();\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      console.log('Attempting login with:', email);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        console.error('Login error:', error);\n        return { success: false, error: error.message };\n      }\n\n      console.log('Login successful:', data);\n      return { success: true, user: data.user };\n    } catch (error) {\n      console.error('Login exception:', error);\n      return { success: false, error: 'Login failed: ' + error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signup = async (formData, type) => {\n    try {\n      setLoading(true);\n      \n      // Create auth user first\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.name,\n            role: type === 'tenant' ? 'tenant_admin' : type === 'companyless' ? 'companyless_user' : 'tenant_user',\n            company_name: formData.companyName || null,\n            phone: formData.phone || null,\n            selected_tenant_id: formData.selectedTenantId || null\n          }\n        }\n      });\n\n      if (authError) {\n        return { success: false, error: authError.message };\n      }\n\n      // If user creation was successful and it's a tenant signup, create tenant\n      if (authData.user && type === 'tenant') {\n        const { data: tenantData, error: tenantError } = await supabase\n          .from('tenants')\n          .insert([{\n            company_name: formData.companyName,\n            company_email: formData.email,\n            company_phone: formData.phone || null,\n            created_by: authData.user.id\n          }])\n          .select()\n          .single();\n\n        if (tenantError) {\n          console.error('Tenant creation error:', tenantError);\n          // Don't fail the signup if tenant creation fails, just log it\n        } else {\n          // Update the user's profile with tenant_id\n          const { error: profileError } = await supabase\n            .from('profiles')\n            .update({ tenant_id: tenantData.id })\n            .eq('id', authData.user.id);\n          \n          if (profileError) {\n            console.error('Profile update error:', profileError);\n          }\n        }\n      }\n\n      // If it's a user signup and they selected a tenant, update their profile\n      if (authData.user && type === 'user' && formData.selectedTenantId) {\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .update({ tenant_id: formData.selectedTenantId })\n          .eq('id', authData.user.id);\n        \n        if (profileError) {\n          console.error('Profile update error for user:', profileError);\n        }\n      }\n\n      return { success: true, user: authData.user };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { success: false, error: 'Registration failed' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Log logout activity before signing out\n      if (user && profile) {\n        await logActivity(user.id, profile.tenant_id, 'logout', null, null, 'User logged out');\n      }\n      \n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  const logActivity = async (userId, tenantId, activityType, resourceType = null, resourceId = null, description = '') => {\n    try {\n      const { error } = await supabase.rpc('log_activity', {\n        p_user_id: userId,\n        p_tenant_id: tenantId,\n        p_activity_type: activityType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n        p_description: description,\n        p_metadata: {}\n      });\n\n      if (error) {\n        console.error('Error logging activity:', error);\n      }\n    } catch (error) {\n      console.error('Error in logActivity:', error);\n    }\n  };\n\n  const value = {\n    user,\n    profile,\n    userType,\n    login,\n    signup,\n    logout,\n    loading,\n    logActivity\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}