{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\TENANT NEW\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    const getSession = async () => {\n      try {\n        console.log('Getting initial session...');\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Session error:', error);\n          setLoading(false);\n          return;\n        }\n        if (session) {\n          console.log('Session found:', session.user.email);\n          await handleUserSession(session.user);\n        } else {\n          console.log('No session found');\n        }\n      } catch (error) {\n        console.error('Error getting session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getSession();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user;\n      console.log('Auth state change:', event, session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.email);\n      if (event === 'SIGNED_IN' && session) {\n        await handleUserSession(session.user);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setUserType(null);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const handleUserSession = async authUser => {\n    try {\n      // Get user profile\n      const {\n        data: profileData,\n        error\n      } = await supabase.from('profiles').select(`\n          *,\n          tenants (\n            id,\n            company_name,\n            company_email,\n            subscription_plan,\n            max_users\n          )\n        `).eq('id', authUser.id).single();\n      if (error) {\n        console.error('Error fetching profile:', error);\n\n        // If profile doesn't exist, create it\n        if (error.code === 'PGRST116') {\n          var _authUser$user_metada, _authUser$user_metada2;\n          console.log('Profile not found, creating one...');\n          const {\n            data: newProfile,\n            error: createError\n          } = await supabase.from('profiles').insert([{\n            id: authUser.id,\n            email: authUser.email,\n            full_name: ((_authUser$user_metada = authUser.user_metadata) === null || _authUser$user_metada === void 0 ? void 0 : _authUser$user_metada.full_name) || 'User',\n            role: ((_authUser$user_metada2 = authUser.user_metadata) === null || _authUser$user_metada2 === void 0 ? void 0 : _authUser$user_metada2.role) || 'tenant_user'\n          }]).select().single();\n          if (createError) {\n            console.error('Error creating profile:', createError);\n            return;\n          }\n          setUser(authUser);\n          setProfile(newProfile);\n          setUserType(newProfile.role === 'tenant_admin' ? 'tenant' : 'user');\n        }\n        return;\n      }\n      setUser(authUser);\n      setProfile(profileData);\n      setUserType(profileData.role === 'tenant_admin' ? 'tenant' : 'user');\n\n      // Log login activity\n      if (profileData.tenant_id) {\n        await logActivity(authUser.id, profileData.tenant_id, 'login', null, null, 'User logged in');\n      }\n    } catch (error) {\n      console.error('Error handling user session:', error);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      console.log('Attempting login with:', email);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        console.error('Login error:', error);\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n      console.log('Login successful:', data);\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      console.error('Login exception:', error);\n      return {\n        success: false,\n        error: 'Login failed: ' + error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async (formData, type) => {\n    try {\n      setLoading(true);\n\n      // Create auth user first\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.name,\n            role: type === 'tenant' ? 'tenant_admin' : 'tenant_user',\n            company_name: formData.companyName || null,\n            phone: formData.phone || null\n          }\n        }\n      });\n      if (authError) {\n        return {\n          success: false,\n          error: authError.message\n        };\n      }\n\n      // If user creation was successful and it's a tenant signup, create tenant\n      if (authData.user && type === 'tenant') {\n        const {\n          data: tenantData,\n          error: tenantError\n        } = await supabase.from('tenants').insert([{\n          company_name: formData.companyName,\n          company_email: formData.email,\n          company_phone: formData.phone || null,\n          created_by: authData.user.id\n        }]).select().single();\n        if (tenantError) {\n          console.error('Tenant creation error:', tenantError);\n          // Don't fail the signup if tenant creation fails, just log it\n        } else {\n          // Update the user's profile with tenant_id\n          const {\n            error: profileError\n          } = await supabase.from('profiles').update({\n            tenant_id: tenantData.id\n          }).eq('id', authData.user.id);\n          if (profileError) {\n            console.error('Profile update error:', profileError);\n          }\n        }\n      }\n      return {\n        success: true,\n        user: authData.user\n      };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // Log logout activity before signing out\n      if (user && profile) {\n        await logActivity(user.id, profile.tenant_id, 'logout', null, null, 'User logged out');\n      }\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n  const logActivity = async (userId, tenantId, activityType, resourceType = null, resourceId = null, description = '') => {\n    try {\n      const {\n        error\n      } = await supabase.rpc('log_activity', {\n        p_user_id: userId,\n        p_tenant_id: tenantId,\n        p_activity_type: activityType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n        p_description: description,\n        p_metadata: {}\n      });\n      if (error) {\n        console.error('Error logging activity:', error);\n      }\n    } catch (error) {\n      console.error('Error in logActivity:', error);\n    }\n  };\n  const value = {\n    user,\n    profile,\n    userType,\n    login,\n    signup,\n    logout,\n    loading,\n    logActivity\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"rdxSALELrgyIsgH8a/mfXKOdhBc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","profile","setProfile","userType","setUserType","loading","setLoading","getSession","console","log","data","session","error","auth","email","handleUserSession","subscription","onAuthStateChange","event","_session$user","unsubscribe","authUser","profileData","from","select","eq","id","single","code","_authUser$user_metada","_authUser$user_metada2","newProfile","createError","insert","full_name","user_metadata","role","tenant_id","logActivity","login","password","signInWithPassword","success","message","signup","formData","type","authData","authError","signUp","options","name","company_name","companyName","phone","tenantData","tenantError","company_email","company_phone","created_by","profileError","update","logout","signOut","userId","tenantId","activityType","resourceType","resourceId","description","rpc","p_user_id","p_tenant_id","p_activity_type","p_resource_type","p_resource_id","p_description","p_metadata","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/TENANT NEW/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    const getSession = async () => {\n      try {\n        console.log('Getting initial session...');\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Session error:', error);\n          setLoading(false);\n          return;\n        }\n        \n        if (session) {\n          console.log('Session found:', session.user.email);\n          await handleUserSession(session.user);\n        } else {\n          console.log('No session found');\n        }\n      } catch (error) {\n        console.error('Error getting session:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      console.log('Auth state change:', event, session?.user?.email);\n      \n      if (event === 'SIGNED_IN' && session) {\n        await handleUserSession(session.user);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setUserType(null);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const handleUserSession = async (authUser) => {\n    try {\n      // Get user profile\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select(`\n          *,\n          tenants (\n            id,\n            company_name,\n            company_email,\n            subscription_plan,\n            max_users\n          )\n        `)\n        .eq('id', authUser.id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching profile:', error);\n        \n        // If profile doesn't exist, create it\n        if (error.code === 'PGRST116') {\n          console.log('Profile not found, creating one...');\n          const { data: newProfile, error: createError } = await supabase\n            .from('profiles')\n            .insert([{\n              id: authUser.id,\n              email: authUser.email,\n              full_name: authUser.user_metadata?.full_name || 'User',\n              role: authUser.user_metadata?.role || 'tenant_user'\n            }])\n            .select()\n            .single();\n\n          if (createError) {\n            console.error('Error creating profile:', createError);\n            return;\n          }\n\n          setUser(authUser);\n          setProfile(newProfile);\n          setUserType(newProfile.role === 'tenant_admin' ? 'tenant' : 'user');\n        }\n        return;\n      }\n\n      setUser(authUser);\n      setProfile(profileData);\n      setUserType(profileData.role === 'tenant_admin' ? 'tenant' : 'user');\n\n      // Log login activity\n      if (profileData.tenant_id) {\n        await logActivity(authUser.id, profileData.tenant_id, 'login', null, null, 'User logged in');\n      }\n    } catch (error) {\n      console.error('Error handling user session:', error);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      console.log('Attempting login with:', email);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        console.error('Login error:', error);\n        return { success: false, error: error.message };\n      }\n\n      console.log('Login successful:', data);\n      return { success: true, user: data.user };\n    } catch (error) {\n      console.error('Login exception:', error);\n      return { success: false, error: 'Login failed: ' + error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signup = async (formData, type) => {\n    try {\n      setLoading(true);\n      \n      // Create auth user first\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.name,\n            role: type === 'tenant' ? 'tenant_admin' : 'tenant_user',\n            company_name: formData.companyName || null,\n            phone: formData.phone || null\n          }\n        }\n      });\n\n      if (authError) {\n        return { success: false, error: authError.message };\n      }\n\n      // If user creation was successful and it's a tenant signup, create tenant\n      if (authData.user && type === 'tenant') {\n        const { data: tenantData, error: tenantError } = await supabase\n          .from('tenants')\n          .insert([{\n            company_name: formData.companyName,\n            company_email: formData.email,\n            company_phone: formData.phone || null,\n            created_by: authData.user.id\n          }])\n          .select()\n          .single();\n\n        if (tenantError) {\n          console.error('Tenant creation error:', tenantError);\n          // Don't fail the signup if tenant creation fails, just log it\n        } else {\n          // Update the user's profile with tenant_id\n          const { error: profileError } = await supabase\n            .from('profiles')\n            .update({ tenant_id: tenantData.id })\n            .eq('id', authData.user.id);\n          \n          if (profileError) {\n            console.error('Profile update error:', profileError);\n          }\n        }\n      }\n\n      return { success: true, user: authData.user };\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { success: false, error: 'Registration failed' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Log logout activity before signing out\n      if (user && profile) {\n        await logActivity(user.id, profile.tenant_id, 'logout', null, null, 'User logged out');\n      }\n      \n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  const logActivity = async (userId, tenantId, activityType, resourceType = null, resourceId = null, description = '') => {\n    try {\n      const { error } = await supabase.rpc('log_activity', {\n        p_user_id: userId,\n        p_tenant_id: tenantId,\n        p_activity_type: activityType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n        p_description: description,\n        p_metadata: {}\n      });\n\n      if (error) {\n        console.error('Error logging activity:', error);\n      }\n    } catch (error) {\n      console.error('Error in logActivity:', error);\n    }\n  };\n\n  const value = {\n    user,\n    profile,\n    userType,\n    login,\n    signup,\n    logout,\n    loading,\n    logActivity\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}