{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\TENANT NEW\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userType, setUserType] = useState(null); // 'user' or 'tenant'\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing session in localStorage\n    const savedUser = localStorage.getItem('user');\n    const savedUserType = localStorage.getItem('userType');\n    if (savedUser && savedUserType) {\n      setUser(JSON.parse(savedUser));\n      setUserType(savedUserType);\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password, type) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock authentication logic\n      const userData = {\n        id: Date.now(),\n        email,\n        name: type === 'tenant' ? 'Company Admin' : 'User',\n        ...(type === 'tenant' && {\n          companyName: 'Sample Company'\n        })\n      };\n      setUser(userData);\n      setUserType(type);\n\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      localStorage.setItem('userType', type);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  };\n  const signup = async (formData, type) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock registration logic\n      const userData = {\n        id: Date.now(),\n        email: formData.email,\n        name: formData.name,\n        ...(type === 'tenant' && {\n          companyName: formData.companyName\n        })\n      };\n      setUser(userData);\n      setUserType(type);\n\n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      localStorage.setItem('userType', type);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setUserType(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('userType');\n  };\n  const value = {\n    user,\n    userType,\n    login,\n    signup,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"KaZQFEIF++F92u4qGUn/JfVMe3M=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","userType","setUserType","loading","setLoading","savedUser","localStorage","getItem","savedUserType","JSON","parse","login","email","password","type","Promise","resolve","setTimeout","userData","id","Date","now","name","companyName","setItem","stringify","success","error","signup","formData","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/TENANT NEW/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [userType, setUserType] = useState(null); // 'user' or 'tenant'\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session in localStorage\n    const savedUser = localStorage.getItem('user');\n    const savedUserType = localStorage.getItem('userType');\n    \n    if (savedUser && savedUserType) {\n      setUser(JSON.parse(savedUser));\n      setUserType(savedUserType);\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password, type) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock authentication logic\n      const userData = {\n        id: Date.now(),\n        email,\n        name: type === 'tenant' ? 'Company Admin' : 'User',\n        ...(type === 'tenant' && { companyName: 'Sample Company' })\n      };\n\n      setUser(userData);\n      setUserType(type);\n      \n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      localStorage.setItem('userType', type);\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: 'Login failed' };\n    }\n  };\n\n  const signup = async (formData, type) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Mock registration logic\n      const userData = {\n        id: Date.now(),\n        email: formData.email,\n        name: formData.name,\n        ...(type === 'tenant' && { companyName: formData.companyName })\n      };\n\n      setUser(userData);\n      setUserType(type);\n      \n      // Save to localStorage\n      localStorage.setItem('user', JSON.stringify(userData));\n      localStorage.setItem('userType', type);\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: 'Registration failed' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setUserType(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('userType');\n  };\n\n  const value = {\n    user,\n    userType,\n    login,\n    signup,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}