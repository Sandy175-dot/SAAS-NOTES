{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Desktop\\\\TENANT NEW\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    const getSession = async () => {\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      if (session) {\n        await handleUserSession(session.user);\n      }\n      setLoading(false);\n    };\n    getSession();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session) {\n        await handleUserSession(session.user);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setUserType(null);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const handleUserSession = async authUser => {\n    try {\n      // Get user profile\n      const {\n        data: profileData,\n        error\n      } = await supabase.from('profiles').select(`\n          *,\n          tenants (\n            id,\n            company_name,\n            company_email,\n            subscription_plan,\n            max_users\n          )\n        `).eq('id', authUser.id).single();\n      if (error) {\n        console.error('Error fetching profile:', error);\n        return;\n      }\n      setUser(authUser);\n      setProfile(profileData);\n      setUserType(profileData.role === 'tenant_admin' ? 'tenant' : 'user');\n\n      // Log login activity\n      await logActivity(authUser.id, profileData.tenant_id, 'login', null, null, 'User logged in');\n    } catch (error) {\n      console.error('Error handling user session:', error);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signup = async (formData, type) => {\n    try {\n      setLoading(true);\n\n      // First, create the tenant if it's a tenant signup\n      let tenantId = null;\n      if (type === 'tenant') {\n        const {\n          data: tenantData,\n          error: tenantError\n        } = await supabase.from('tenants').insert([{\n          company_name: formData.companyName,\n          company_email: formData.email,\n          company_phone: formData.phone || null,\n          created_by: null // Will be updated after user creation\n        }]).select().single();\n        if (tenantError) {\n          return {\n            success: false,\n            error: tenantError.message\n          };\n        }\n        tenantId = tenantData.id;\n      }\n\n      // Create auth user\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.name,\n            role: type === 'tenant' ? 'tenant_admin' : 'tenant_user',\n            tenant_id: tenantId\n          }\n        }\n      });\n      if (authError) {\n        // If tenant was created but user creation failed, clean up\n        if (tenantId) {\n          await supabase.from('tenants').delete().eq('id', tenantId);\n        }\n        return {\n          success: false,\n          error: authError.message\n        };\n      }\n\n      // Update tenant with created_by if it's a tenant signup\n      if (tenantId && authData.user) {\n        await supabase.from('tenants').update({\n          created_by: authData.user.id\n        }).eq('id', tenantId);\n      }\n      return {\n        success: true,\n        user: authData.user\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Registration failed'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // Log logout activity before signing out\n      if (user && profile) {\n        await logActivity(user.id, profile.tenant_id, 'logout', null, null, 'User logged out');\n      }\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n  const logActivity = async (userId, tenantId, activityType, resourceType = null, resourceId = null, description = '') => {\n    try {\n      const {\n        error\n      } = await supabase.rpc('log_activity', {\n        p_user_id: userId,\n        p_tenant_id: tenantId,\n        p_activity_type: activityType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n        p_description: description,\n        p_metadata: {}\n      });\n      if (error) {\n        console.error('Error logging activity:', error);\n      }\n    } catch (error) {\n      console.error('Error in logActivity:', error);\n    }\n  };\n  const value = {\n    user,\n    profile,\n    userType,\n    login,\n    signup,\n    logout,\n    loading,\n    logActivity\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"rdxSALELrgyIsgH8a/mfXKOdhBc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","profile","setProfile","userType","setUserType","loading","setLoading","getSession","data","session","auth","handleUserSession","subscription","onAuthStateChange","event","unsubscribe","authUser","profileData","error","from","select","eq","id","single","console","role","logActivity","tenant_id","login","email","password","signInWithPassword","success","message","signup","formData","type","tenantId","tenantData","tenantError","insert","company_name","companyName","company_email","company_phone","phone","created_by","authData","authError","signUp","options","full_name","name","delete","update","logout","signOut","userId","activityType","resourceType","resourceId","description","rpc","p_user_id","p_tenant_id","p_activity_type","p_resource_type","p_resource_id","p_description","p_metadata","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Desktop/TENANT NEW/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [userType, setUserType] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    const getSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      if (session) {\n        await handleUserSession(session.user);\n      }\n      setLoading(false);\n    };\n\n    getSession();\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN' && session) {\n        await handleUserSession(session.user);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n        setProfile(null);\n        setUserType(null);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const handleUserSession = async (authUser) => {\n    try {\n      // Get user profile\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select(`\n          *,\n          tenants (\n            id,\n            company_name,\n            company_email,\n            subscription_plan,\n            max_users\n          )\n        `)\n        .eq('id', authUser.id)\n        .single();\n\n      if (error) {\n        console.error('Error fetching profile:', error);\n        return;\n      }\n\n      setUser(authUser);\n      setProfile(profileData);\n      setUserType(profileData.role === 'tenant_admin' ? 'tenant' : 'user');\n\n      // Log login activity\n      await logActivity(authUser.id, profileData.tenant_id, 'login', null, null, 'User logged in');\n    } catch (error) {\n      console.error('Error handling user session:', error);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true, user: data.user };\n    } catch (error) {\n      return { success: false, error: 'Login failed' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signup = async (formData, type) => {\n    try {\n      setLoading(true);\n      \n      // First, create the tenant if it's a tenant signup\n      let tenantId = null;\n      if (type === 'tenant') {\n        const { data: tenantData, error: tenantError } = await supabase\n          .from('tenants')\n          .insert([{\n            company_name: formData.companyName,\n            company_email: formData.email,\n            company_phone: formData.phone || null,\n            created_by: null // Will be updated after user creation\n          }])\n          .select()\n          .single();\n\n        if (tenantError) {\n          return { success: false, error: tenantError.message };\n        }\n        tenantId = tenantData.id;\n      }\n\n      // Create auth user\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.name,\n            role: type === 'tenant' ? 'tenant_admin' : 'tenant_user',\n            tenant_id: tenantId\n          }\n        }\n      });\n\n      if (authError) {\n        // If tenant was created but user creation failed, clean up\n        if (tenantId) {\n          await supabase.from('tenants').delete().eq('id', tenantId);\n        }\n        return { success: false, error: authError.message };\n      }\n\n      // Update tenant with created_by if it's a tenant signup\n      if (tenantId && authData.user) {\n        await supabase\n          .from('tenants')\n          .update({ created_by: authData.user.id })\n          .eq('id', tenantId);\n      }\n\n      return { success: true, user: authData.user };\n    } catch (error) {\n      return { success: false, error: 'Registration failed' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Log logout activity before signing out\n      if (user && profile) {\n        await logActivity(user.id, profile.tenant_id, 'logout', null, null, 'User logged out');\n      }\n      \n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        console.error('Error signing out:', error);\n      }\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  const logActivity = async (userId, tenantId, activityType, resourceType = null, resourceId = null, description = '') => {\n    try {\n      const { error } = await supabase.rpc('log_activity', {\n        p_user_id: userId,\n        p_tenant_id: tenantId,\n        p_activity_type: activityType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n        p_description: description,\n        p_metadata: {}\n      });\n\n      if (error) {\n        console.error('Error logging activity:', error);\n      }\n    } catch (error) {\n      console.error('Error in logActivity:', error);\n    }\n  };\n\n  const value = {\n    user,\n    profile,\n    userType,\n    login,\n    signup,\n    logout,\n    loading,\n    logActivity\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}